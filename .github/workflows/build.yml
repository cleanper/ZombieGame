name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_COUNTER: ${{ github.run_number }}
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [21]

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew build --parallel --no-daemon --stacktrace

      - name: Find and upload build artifacts
        id: upload_artifacts
        run: |
          JAR_PATH=$(find build/libs -name '*.jar' -not -name '*-plain*' -not -name '*-javadoc*' -not -name '*-sources*' | head -n 1)
          if [ -z "$JAR_PATH" ]; then
            echo "::error::No valid JAR file found in build/libs"
            exit 1
          fi
          echo "jar_path=$JAR_PATH" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            ${{ steps.upload_artifacts.outputs.jar_path }}
            build/reports/tests/test
          retention-days: 0

  release:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      BUILD_COUNTER: ${{ github.run_number }}

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: artifacts

      - name: Prepare release assets
        id: prepare_assets
        run: |
          JAR_PATH=$(find artifacts -name '*.jar' -not -name '*-plain*' -not -name '*-javadoc*' -not -name '*-sources*' | head -n 1)
          
          if [ -z "$JAR_PATH" ]; then
            echo "::error::No valid JAR file found in artifacts"
            exit 1
          fi
          
          JAR_FILE=$(basename "$JAR_PATH")
          BASE_NAME=$(basename "$JAR_FILE" .jar)
          NEW_JAR_NAME="${BASE_NAME}+build.${BUILD_COUNTER}.jar"
          
          mkdir -p release-assets/libs
          cp "$JAR_PATH" "release-assets/libs/$NEW_JAR_NAME"
          
          if [ -d "artifacts/test-reports" ]; then
            mkdir -p release-assets/test-reports
            cp -r artifacts/test-reports/* release-assets/test-reports/
          fi
          
          echo "version=${BASE_NAME}+build.${BUILD_COUNTER}" >> $GITHUB_OUTPUT
          echo "jar_file=release-assets/libs/${NEW_JAR_NAME}" >> $GITHUB_OUTPUT
          echo "test_reports=release-assets/test-reports" >> $GITHUB_OUTPUT

      - name: Create source code zip
        run: |
          mkdir -p release-assets
          zip -r release-assets/source-code.zip . -x '*.git*' 'build/*' '.gradle/*' '*.idea*' '*.DS_Store*' 'artifacts/*'

      - name: Get version description
        id: version_desc
        run: |
          CURRENT_VERSION="${{ steps.prepare_assets.outputs.version }}"
          VERSION_LINE=$(grep -n "^${CURRENT_VERSION}" Version_Description.txt | cut -d: -f1)
          
          if [ -n "$VERSION_LINE" ]; then
            DESCRIPTION=$(awk -v line="$VERSION_LINE" 'NR==line+1' Version_Description.txt)
            if [ -z "$DESCRIPTION" ]; then
              DESCRIPTION="No description available for this version"
            fi
          else
            DESCRIPTION="No version entry found in Version_Description.txt"
          fi
          
          echo "description=${DESCRIPTION}" >> $GITHUB_OUTPUT

      - name: Get previous tag
        id: previous_tag
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match "v*" "$(git rev-list --tags --skip=1 --max-count=1)" 2>/dev/null || echo "")
          echo "previous_tag=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.prepare_assets.outputs.version }}
          name: ${{ steps.prepare_assets.outputs.version }}
          body: |
            ${{ steps.version_desc.outputs.description }}
            
            Full Changelog: https://github.com/${{ github.repository }}/compare/${{ steps.previous_tag.outputs.previous_tag }}...v${{ steps.prepare_assets.outputs.version }}
          files: |
            ${{ steps.prepare_assets.outputs.jar_file }}
            ${{ steps.prepare_assets.outputs.test_reports }}/*
            release-assets/source-code.zip
          draft: false
          prerelease: false
          generate_release_notes: false
